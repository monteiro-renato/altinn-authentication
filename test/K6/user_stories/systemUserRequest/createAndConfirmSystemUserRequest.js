import { check, group, uuidv4, EnterpriseTokenGenerator, MaskinportenAccessTokenGenerator, PersonalTokenGenerator } from '../systemRegister/commonImports.js';
import { ApproveSystemUserRequest } from '../../tests/systemUserRequest/index.js';
import { CreateSystemUserRequest } from "../../tests/systemUserRequest/index.js"
import { SystemUserRequestApiClient, SystemRegisterApiClient } from "../../clients/index.js"
import { CreateNewSystem } from "../../tests/systemRegister/index.js"


export default function () {

    const systemOwner = "713431400"; // TODO: No clue where this came from. // In the integration tests it's called vendorId

    // Is it better to create one token with just the needed scope and request multiple tokens for multiple requests?
    // Or ask for a single token with multiple scopes?
    // Does it matter? performance vs least priviledge / validation of correct scope definition(s)
    // https://docs.altinn.studio/api/authentication/systemuserapi/systemuserrequest/external/
    const options = new Map();
    options.set("env", __ENV.ENVIRONMENT) // TODO: Add ENVIRONMENT env var by default? so we can use __ENV.ENVIRONMENT instead
    options.set("ttl", 3600);
    options.set("scopes", "altinn:authentication/systemregister.write altinn:authentication/systemuser.request.write altinn:authentication/systemuser.request.read altinn:authorization/authorize")
    options.set("orgNo", systemOwner);

    const tokenGenerator
        = new EnterpriseTokenGenerator(options)

    const systemRegisterApiClient
        = new SystemRegisterApiClient(__ENV.BASE_URL, tokenGenerator)

    const vendorSystemUserRequestApiClient
        = new SystemUserRequestApiClient(__ENV.BASE_URL, tokenGenerator)

    const mySystemUsers = [
        {
            orgNo: "314250052",
            partyId: "51243526",
            ssn: "06857897380", // The social security number. # pid is referred to as ssn (social security number) i Altinn Platform.
            userId: "20013183", // The internal Altinn userId for the authenticated user.
            userPartyId: "51243526",
            orgUuid: "368f5a82-97f5-4f33-b372-ac998a4d6b22",
            orgType: "regnskapsforer"
        }
    ]

    const resource = "ttd-dialogporten-performance-test-01";
    const name = `perftest${uuidv4()}` // TODO: relevant name
    const systemId = `${systemOwner}_${name}`;
    const clientId = uuidv4() // TODO: still no clue what this is supposed to be
    const description = {
        "en": "This is auto generated by an integration test. Some data is randomized, but some is not - like this description",
        "nb": "Integrasjonstest. Noe er randomisert her, men mye blir likt.",
        "nn": "integrasjonstest pÃ¥ nynorsk. Noe er randomisert her, men mye blir likt."
    }
    const rights = [
        {
            "resource": [
                {
                    "value": resource,
                    "id": "urn:altinn:resource"
                }
            ]
        }
    ]

    const allowedRedirectUrls = ["https://digdir.no"]

    let res = CreateNewSystem(systemRegisterApiClient,
        systemOwner,
        name,
        clientId,
        description,
        rights,
        allowedRedirectUrls,
        [])
    check(res, {
        'CreateNewSystem - Creating a new System returns an ID': (r) => {
            const jsonBody = JSON.parse(r);
            const re = /^[a-z\d\-]+$/
            return re.test(jsonBody);
        }
    });

    group('Create and Confirm System User', function () {
        let res = CreateSystemUserRequest(
            vendorSystemUserRequestApiClient,
            systemId,
            mySystemUsers[0].orgNo,//partyOrgNo,
            rights,
            allowedRedirectUrls[0],
            []
        )
        check(res, {
            'CreateSystemUser - Creating a new SystemUser returns expected object': (r) => {
                const jsonBody = JSON.parse(r);
                return "id" in jsonBody &&
                    "externalRef" in jsonBody &&
                    "systemId" in jsonBody &&
                    "partyOrgNo" in jsonBody &&
                    "rights" in jsonBody &&
                    "status" in jsonBody &&
                    "redirectUrl" in jsonBody &&
                    "confirmUrl" in jsonBody;
            }
        });

        const requestId = JSON.parse(res).id

        const options = new Map();
        options.set("env", __ENV.ENVIRONMENT) // TODO: Add ENVIRONMENT env var by default? so we can use __ENV.ENVIRONMENT instead
        options.set("ttl", 3600);
        options.set("scopes", "altinn:portal/enduser")
        options.set("userId", mySystemUsers[0].userId);

        const tokenGenerator
            = new PersonalTokenGenerator(options)

        const approverSystemUserRequestApiClient
            = new SystemUserRequestApiClient(__ENV.BASE_URL, tokenGenerator)

        res = ApproveSystemUserRequest(approverSystemUserRequestApiClient,
            mySystemUsers[0].partyId,
            requestId)
        check(res, {
            'ApproveSystemUserRequest - Approving the system user request is successful': (r) => {
                const jsonBody = JSON.parse(r);
                return true == jsonBody
            }
        });
    });
}
