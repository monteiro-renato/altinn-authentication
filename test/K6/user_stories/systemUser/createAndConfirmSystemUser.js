import { check, group, uuidv4, EnterpriseTokenGenerator, MaskinportenAccessTokenGenerator } from '../systemRegister/commonImports.js';
import { ApproveSystemUserRequest } from '../../tests/systemUserRequest/index.js';
import { CreateSystemUser } from "../../tests/systemUser/index.js"
import { SystemUserRequestApiClient, SystemRegisterApiClient, SystemUserApiClient } from "../../clients/index.js"
import { CreateNewSystem } from "../../tests/systemRegister/index.js"


export default function () {

    const systemOwner = "713431400"; // TODO: No clue where this came from. // In the integration tests it's called vendorId

    const options = new Map();
    options.set("env", __ENV.ENVIRONMENT) // TODO: Add ENVIRONMENT env var by default? so we can use __ENV.ENVIRONMENT instead
    options.set("ttl", 3600);
    options.set("scopes", "altinn:authentication/systemregister.write altinn:authentication/systemuser.request.write altinn:authentication/systemuser.request.read altinn:authorization/authorize")
    options.set("orgNo", systemOwner);

    const tokenGenerator
        = new EnterpriseTokenGenerator(options)

    const systemRegisterApiClient
        = new SystemRegisterApiClient(__ENV.BASE_URL, tokenGenerator)

    const systemUserApiClient
        = new SystemUserApiClient(__ENV.BASE_URL, tokenGenerator)

    // Needs another TokenGenerator?
    const systemUserRequestApiClient
        = new SystemUserRequestApiClient(__ENV.BASE_URL, tokenGenerator)

    // variables and whatnot
    // data-at22-all-customers.csv
    const mySystemUsers = [
        {
            orgNo: "314250052",
            partyId: "51243526",
            ssn: "06857897380",
            userId: "20013183",
            userPartyId: "51243526",
            orgUuid: "368f5a82-97f5-4f33-b372-ac998a4d6b22",
            orgType: "regnskapsforer"
        }
    ]
    // dialogporten?
    const resource = "ttd-dialogporten-performance-test-01";
    const systemId = `${systemOwner}_${uuidv4()}`;
    const name = `perftest${uuidv4()}` // TODO: relevant name
    const clientId = uuidv4() // TODO: still no clue what this is supposed to be
    const description = {
        "en": "This is auto generated by an integration test. Some data is randomized, but some is not - like this description",
        "nb": "Integrasjonstest. Noe er randomisert her, men mye blir likt.",
        "nn": "integrasjonstest pÃ¥ nynorsk. Noe er randomisert her, men mye blir likt."
    }
    const rights = [
        {
            "resource": [
                {
                    "value": resource,
                    "id": "urn:altinn:resource"
                }
            ]
        }
    ]

    const allowedRedirectUrls = ["https://digdir.no"]

    let res = CreateNewSystem(systemRegisterApiClient,
        systemOwner,
        name,
        clientId,
        description,
        rights,
        allowedRedirectUrls,
        [])
    check(res, {
        'CreateNewSystem - Creating a new System returns an ID': (r) => {
            const jsonBody = JSON.parse(r);
            const re = /^[a-z\d\-]+$/
            return re.test(jsonBody);
        }
    });
    /*
    // Why is the clientId needed?
    const [token, clientId] = getSystemOwnerTokenAndClientId(systemOwner, __ITER);
    // How exactly were these resources created? : https://github.com/Altinn/altinn-authentication/blob/main/test/Altinn.Platform.Authentication.PerformanceTests/common/readTestdata.js#L44
    //
    const resource = randomItem(resources);

    const systemId = `${systemOwner}_${uuidv4()}`;

    // The system response is the id
    const systemResponse = createSystem(systemOwner, systemId, [resource], token, clientId, "resource");

    // hardcoded data coming from somewhere?
    const organization = randomItem(mySystemUsers)

    // huh? what is this supposed to be doing
    data[exec.vu.idInTest - 1] = data[exec.vu.idInTest - 1].filter(item => item.orgNo != organization.orgNo);

    // resource is the type; if accessPackage is passed, it's another API, ending in /agent https://docs.altinn.studio/api/authentication/systemuserapi/systemuserrequest/external/#create-an-agent-system-user-request
    let systemUserId = createSystemUser(systemId, organization, [resource], token, "resource", systemResponse);

    // requires a specific scope in the token
    approveSystemUser(organization, systemUserId, "resource", systemUserId);



    */

    group('Create and Confirm System User', function () {
        let res = CreateSystemUser(
            systemUserApiClient,
            systemId,
            mySystemUsers[0].orgNo,//partyOrgNo,
            rights,
            allowedRedirectUrls[0],
            []
        )
        check(res, {
            'CreateSystemUser - Creating a new SystemUser returns expected object': (r) => {
                const jsonBody = JSON.parse(r);
                return "id" in jsonBody &&
                    "externalRef" in jsonBody &&
                    "systemId" in jsonBody &&
                    "partyOrgNo" in jsonBody &&
                    "rights" in jsonBody &&
                    "status" in jsonBody &&
                    "redirectUrl" in jsonBody &&
                    "confirmUrl" in jsonBody;
            }
        });

        res = ApproveSystemUserRequest(systemUserRequestApiClient,
            systemId,
            mySystemUsers[0].orgNo,//partyOrgNo,
            rights,
            allowedRedirectUrls[0],
            [])
        check(res, {
            'ApproveSystemUserRequest - Approving the system user request is successful': (r) => {
                const jsonBody = JSON.parse(r);
                return "id" in jsonBody &&
                    "externalRef" in jsonBody &&
                    "systemId" in jsonBody &&
                    "partyOrgNo" in jsonBody &&
                    "rights" in jsonBody &&
                    "status" in jsonBody &&
                    "redirectUrl" in jsonBody &&
                    "confirmUrl" in jsonBody;
            }
        });
    });
}
