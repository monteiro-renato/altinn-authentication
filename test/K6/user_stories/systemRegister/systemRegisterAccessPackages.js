import { check, group, uuidv4, SystemRegisterApiClient, MaskinportenAccessTokenGenerator } from './commonImports.js';
import { CreateNewSystem, DeleteSystem, UpdateVendorAccessPackages } from '../../tests/systemRegister/index.js';


function defaultObject() {
    const name = `NoeVisuelt${uuidv4()}`
    const allowedRedirectUrls = ["https://altinn.no"]
    const clientId = uuidv4()
    const vendorId = 312605031 // https://github.com/Altinn/altinn-authentication/blob/2b87e2eb6b11212c5aaf2032897bc9b8bc5e7519/test/Altinn.Platform.Authentication.SystemIntegrationTests/Resources/Testusers/testusers.at22.json
    const systemId = `${vendorId}_${name}`
    const description = {
        "en": "This is auto generated by an integration test. Some data is randomized, but some is not - like this description",
        "nb": "Integrasjonstest. Noe er randomisert her, men mye blir likt.",
        "nn": "integrasjonstest pÃ¥ nynorsk. Noe er randomisert her, men mye blir likt."
    }
    const accessPackages = [
        {
            "urn": "urn:altinn:accesspackage:krav-og-utlegg"
        }
    ]
    // [] would be rights, which I removed here
    return [name, allowedRedirectUrls, clientId, vendorId, systemId, description, [], accessPackages]
}
/*
export function teardown(data) {

}
*/
export default function () {
    // Initialization
    const maskinportenTokenGenerator
        = new MaskinportenAccessTokenGenerator()

    const systemRegisterClient
        = new SystemRegisterApiClient(__ENV.BASE_URL, maskinportenTokenGenerator)

    // variables and whatnot
    const [name, allowedRedirectUrls, clientId, vendorId, systemId, description, rights, accessPackages] = defaultObject();


    group('System Register Access Packages Workflow', function () {
        console.log("CreateNewSystem")
        let res = CreateNewSystem(systemRegisterClient, vendorId, name, clientId, description, rights, allowedRedirectUrls, accessPackages)
        check(res, {
            'CreateNewSystem - Creating a new System returns an ID': (r) => {
                const jsonBody = JSON.parse(r);
                const re = /^[a-z\d\-]+$/
                return re.test(jsonBody);
            }
        });

        const newAccessPackages = [
            {
                "urn": "urn:altinn:accesspackage:post-og-telekommunikasjon",
                "urn": "urn:altinn:accesspackage:dokumentbasert-tilsyn",
                "urn": "urn:altinn:accesspackage:infrastruktur",
                "urn": "urn:altinn:accesspackage:patent-varemerke-design",
                "urn": "urn:altinn:accesspackage:tilskudd-stotte-erstatning",
                "urn": "urn:altinn:accesspackage:mine-sider-kommune",
                "urn": "urn:altinn:accesspackage:politi-og-domstol",
                "urn": "urn:altinn:accesspackage:rapportering-statistikk",
                "urn": "urn:altinn:accesspackage:forskning",
                "urn": "urn:altinn:accesspackage:folkeregister",
                "urn": "urn:altinn:accesspackage:maskinporten-scopes",
                "urn": "urn:altinn:accesspackage:maskinlesbare-hendelser",
                "urn": "urn:altinn:accesspackage:maskinporten-scopes-nuf",
            }
        ]

        res = UpdateVendorAccessPackages(systemRegisterClient, systemId, newAccessPackages)
        check(res, {
            'UpdateVendorAccessPackages - Body contains succeeded: true': (r) => {
                const jsonBody = JSON.parse(r);
                return "succeeded" in jsonBody &&
                    jsonBody.succeeded == true;
            }
        });

        console.log("DeleteSystem")
        res = DeleteSystem(systemRegisterClient, systemId)
        check(res, {
            'DeleteSystem - Body contains succeeded: true': (r) => {
                const jsonBody = JSON.parse(r);
                return "succeeded" in jsonBody &&
                    jsonBody.succeeded == true;
            }
        });
    });
}
